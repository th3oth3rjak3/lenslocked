package galleriesModel

import (
	"lenslocked/models"
	"lenslocked/models/errorsModel"

	"github.com/jinzhu/gorm"
)

type galleryGorm struct {
	db *gorm.DB
}

var _ GalleryDB = &galleryGorm{}

// Creates a new gallery and backfills data like ID, CreatedAt, and UpdatedAt fields.
//
// This doesn't check for errors, just returns any errors during processing.
func (gg *galleryGorm) Create(gallery *Gallery) error {
	return gg.db.Create(gallery).Error
}

// ByID will look up a user with the provided ID.
// If the user is found, error will be nil.
// If the user is not found, the error will be set to ErrNotFound.
// If some other error occurs, ByID will return an error with
// more information about what went wrong. This may not be an error
// generated by the models package.
//
// As a general rule, any error but ErrNotFound should probably result in
// an HTTP 500 error.
func (gg *galleryGorm) ByID(id uint) (*Gallery, error) {
	var gallery Gallery
	db := gg.db.Where("id = ?", id)
	err := models.First(db, &gallery)
	if err == gorm.ErrRecordNotFound {
		err = errorsModel.ErrGalleryNotFound
	}
	return &gallery, err
}

// Update will apply updates to a gallery object and save the changes in
// the database.
func (gg *galleryGorm) Update(gallery *Gallery) error {
	return gg.db.Save(gallery).Error
}

// Delete will delete the gallery with the provided ID.
func (gg *galleryGorm) Delete(id uint) error {
	gallery := Gallery{Model: gorm.Model{ID: id}}
	return gg.db.Delete(&gallery).Error
}

// Return all galleries that belong to the user for the provided UserID.
func (gg *galleryGorm) ByUserID(userID uint) ([]Gallery, error) {
	var galleries []Gallery
	err := gg.db.Where("user_id = ?", userID).Order("title asc").Find(&galleries).Error
	if err != nil {
		return nil, err
	}
	return galleries, nil
}
