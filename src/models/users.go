package models

import (
	"errors"
	"os"

	"lenslocked/hash"
	"lenslocked/rand"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"

	"golang.org/x/crypto/bcrypt"
)

// ErrNotFound is returned when a resource cannot be found in the database.
var ErrNotFound = errors.New("models: resource not found")

// ErrInvalidId is returned when an invalid ID is provided to a method like Delete.
var ErrInvalidId = errors.New("models: id provided was invalid")

// ErrInvalidPassword is returned when the user enters an incorrect password
var ErrInvalidPassword = errors.New("models: incorrect password provided")

// ErrEnvironmentUnset is returned when there are missing environment variables
var ErrEnvironmentUnset = errors.New("models: missing required environment variables")

// The User object is a GORM model that that represents the user's information.
type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"`
	PasswordHash string `gorm:"not null"`
	Remember     string `gorm:"-"`
	RememberHash string `gorm:"not null;unique_index"`
}

// Creates an instance of the UserService with the provided connection string.
// After calling new user service, it will be required to close the database
// connection by later calling the UserService.Close() method.
func NewUserService(connectionInfo string) (*UserService, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	key := os.Getenv("HASH_KEY")
	if key == "" {
		return nil, ErrEnvironmentUnset
	}
	hmac := hash.NewHMAC(key)
	return &UserService{
		db:   db,
		hmac: hmac,
	}, nil
}

// The UserService object holds a reference to the database that is
// opened after calling the NewUserService method.
type UserService struct {
	db   *gorm.DB
	hmac hash.HMAC
}

// Creates a provided user and backfills data like the ID, CreatedAt, and UpdatedAt fields.
//
// This doesn't check for errors, just returns any errors during processing.
func (us *UserService) Create(user *User) error {
	if user.Password == "" {
		return ErrInvalidPassword
	}
	pwBytes := []byte(user.Password)
	hashedBytes, err := bcrypt.GenerateFromPassword(pwBytes, bcrypt.DefaultCost)
	if err != nil {
		return err
	}
	user.PasswordHash = string(hashedBytes)
	user.Password = "" // Clear the user's actual password
	if user.Remember == "" {
		// We only want to generate a remember token if one wasn't provided.
		// This is useful in testing scenarios where we want to provide a
		// specific remember token.
		token, err := rand.RememberToken()
		if err != nil {
			return err
		}
		user.Remember = token
	}
	user.RememberHash = us.hmac.Hash(user.Remember)
	user.Remember = "" // Just in case it was set.
	return us.db.Create(user).Error
}

// Authenticates a user with a given email and password.
// If the email address is invalid, this will return nil, ErrNotFound.
// If the password provided is invalid, this will return nil, ErrInvalidPassword
// If the email and password are both valid, this will return user, nil.
// Otherwise, any other errors will return nil, error.
func (us *UserService) Authenticate(email, password string) (*User, error) {
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	pwBytes := []byte(password)
	err = bcrypt.CompareHashAndPassword([]byte(foundUser.PasswordHash), pwBytes)
	if err != nil {
		switch err {
		case bcrypt.ErrMismatchedHashAndPassword:
			return nil, ErrInvalidPassword
		default:
			return nil, err
		}
	}
	return foundUser, nil
}

// Returns the first value from a gorm.DB instance which matches the user object.
// If the user is found, error will be nil.
// If the user is not found, the error will be set to ErrNotFound.
// If some other error occurs, first will return an error with
// more information about what went wrong. This may not be an error
// generated by the models package.
//
// As a general rule, any error but ErrNotFound should probably result in
// an HTTP 500 error.
func first(db *gorm.DB, user *User) error {
	err := db.First(user).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}

// ByID will look up a user with the provided ID.
// If the user is found, error will be nil.
// If the user is not found, the error will be set to ErrNotFound.
// If some other error occurs, ByID will return an error with
// more information about what went wrong. This may not be an error
// generated by the models package.
//
// As a general rule, any error but ErrNotFound should probably result in
// an HTTP 500 error.
func (us *UserService) ByID(id uint) (*User, error) {
	var user User
	db := us.db.Where("id = ?", id)
	err := first(db, &user)
	return &user, err
}

// Returns a user by the provided email address.
// If the user is found, error will be nil.
// If the user is not found, the error will be set to ErrNotFound.
// If some other error occurs, ByEmail will return an error with
// more information about what went wrong. This may not be an error
// generated by the models package.
//
// As a general rule, any error but ErrNotFound should probably result in
// an HTTP 500 error.
func (us *UserService) ByEmail(email string) (*User, error) {
	var user User
	db := us.db.Where("LOWER(email) = LOWER(?)", email)
	err := first(db, &user)
	return &user, err
}

// ByRemember uses a remember token to look up a user in the database
// who has the matching token. This method handles hashing of the token.
// If the user is found, error will be nil.
// If the user is not found, the error will be set to ErrNotFound.
// If some other error occurs, ByRemember will return an error with
// more information about what went wrong. This may not be an error
// generated by the models package.
//
// As a general rule, any error but ErrNotFound should probably result in
// an HTTP 500 error.
func (us *UserService) ByRemember(token string) (*User, error) {
	var usr User
	hashedToken := us.hmac.Hash(token)
	err := first(us.db.Where("remember_hash = ?", hashedToken), &usr)
	if err != nil {
		return nil, err
	}
	return &usr, nil
}

// Updates a user in the database. This update method requires a full user object
// because it overwrites the existing user object. This would be similar to an HTTP PUT,
// rather than an HTTP PATCH method.
func (us *UserService) Update(user *User) error {
	if user.Remember != "" {
		user.RememberHash = us.hmac.Hash(user.Remember)
		user.Remember = "" // clear the Remember string
	}
	return us.db.Save(user).Error
}

// Delete will delete the user with the provided ID.
func (us *UserService) Delete(id uint) error {
	if id < 1 {
		return ErrInvalidId
	}
	usr := User{Model: gorm.Model{ID: id}}
	return us.db.Delete(&usr).Error
}

// Closes the UserService database connection. It can be deferred if desired.
func (us *UserService) Close() error {
	return us.db.Close()
}

// Destructive Reset drops and automigrates the Users table.
func (us *UserService) DestructiveReset() error {
	if err := us.db.DropTableIfExists(&User{}).Error; err != nil {
		return err
	}
	return us.AutoMigrate()
}

// Runs an automigration for the user table in the database.
func (us *UserService) AutoMigrate() error {
	return us.db.AutoMigrate(&User{}).Error
}
