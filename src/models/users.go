package models

import (
	_ "github.com/jinzhu/gorm/dialects/postgres"

	"golang.org/x/crypto/bcrypt"
)

// UsersDB is used to interact with the users database.
//
// For all single user queries:
// If the user is found, error will be nil.
// If the user is not found, the error will be set to ErrNotFound.
// If some other error occurs, ByEmail will return an error with
// more information about what went wrong. This may not be an error
// generated by the models package.
//
// For single user queries, any error but ErrNotFound should probably result in
// an HTTP 500 error.
type UserDB interface {
	// Methods for querying for single users
	ByID(id uint) (*User, error)
	ByEmail(email string) (*User, error)
	ByRemember(token string) (*User, error)

	// Methods for altering users
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error

	// Used to close a DB connection
	Close() error

	// Migration Helpers
	AutoMigrate() error
	DestructiveReset() error

	// Testing Helpers
	LogMode(dbLogModeEnabled bool)
}

// UserService is a set of methods to manipulate and work with the user
// model.
type UserService interface {
	// Authenticate will verify the provided email address and password
	// are correct. If they are correct, the user corresponding to that
	// email is returned. Otherwise, an error will be returned such as:
	// ErrNotFound, ErrInvalidPassword, or another error if something
	// else goes wrong.
	Authenticate(email, password string) (*User, error)
	UserDB
}

// Creates an instance of the UserService with the provided connection string.
// After calling new user service, it will be required to close the database
// connection by later calling the UserService.Close() method.
func NewUserService(connectionInfo string) (UserService, error) {
	uv, err := newUserValidator(connectionInfo)
	if err != nil {
		return nil, err
	}
	return &userService{
		UserDB: uv,
	}, nil
}

// Authenticates a user with a given email and password.
// If the email address is invalid, this will return nil, ErrNotFound.
// If the password provided is invalid, this will return nil, ErrInvalidPassword
// If the email and password are both valid, this will return user, nil.
// Otherwise, any other errors will return nil, error.
func (us *userService) Authenticate(email, password string) (*User, error) {
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	pwBytes := []byte(password)
	err = bcrypt.CompareHashAndPassword([]byte(foundUser.PasswordHash), pwBytes)
	if err != nil {
		switch err {
		case bcrypt.ErrMismatchedHashAndPassword:
			return nil, ErrPasswordIncorrect
		default:
			return nil, err
		}
	}
	return foundUser, nil
}

// The UserService object holds a reference to the database that is
// opened after calling the NewUserService method.
type userService struct {
	UserDB
}
